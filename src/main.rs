fn main() {
    let mut boot_rom = vec![
        // The bootstrap ROM run when the Game Boy is turned on.
        0x31u8, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32,
        0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
        0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3,
        0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
        0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A,
        0xCD, 0x95,    0, 0xCD, 0x96,    0, 0x13, 0x7B,
        0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8,    0, 0x06,
        0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
        0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99,
        0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
        0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64,
        0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
        0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90,
        0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
        0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62,
        0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
        0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42,
        0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
        0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04,
        0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
        0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9,
        0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D,    0, 0x0B,
        0x03, 0x73,    0, 0x83,    0, 0x0C,    0, 0x0D,
           0, 0x08, 0x11, 0x1F, 0x88, 0x89,    0, 0x0E,
        0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99,
        0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
        0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E,
        0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,
        0x21, 0x04, 0x01, 0x11, 0xA8,    0, 0x1A, 0x13,
        0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
        0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20,
        0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50,
    ];
    let game_rom = vec![
        // First 256 bytes of the Pokemon Red US ROM.
        0xFFu8,    0,    0,    0,    0,    0,    0,    0,
        0xFF,    0,    0,    0,    0,    0,    0,    0,
        0xFF,    0,    0,    0,    0,    0,    0,    0,
        0xFF,    0,    0,    0,    0,    0,    0,    0,
        0xFF,    0,    0,    0,    0,    0,    0,    0,
        0xFF,    0,    0,    0,    0,    0,    0,    0,
        0xFF,    0,    0,    0,    0,    0,    0,    0,
        0xFF,    0,    0,    0,    0,    0,    0,    0,
        0xC3, 0x24, 0x20,    0,    0,    0,    0,    0,
        0xFF,    0,    0,    0,    0,    0,    0,    0,
        0xC3, 0x06, 0x23,    0,    0,    0,    0,    0,
        0xC3, 0x25, 0x21,    0,    0,    0,    0,    0,
        0xD9, 0xAF, 0xE0, 0x0F, 0xF0, 0xFF, 0x47, 0xCB,
        0x87, 0xE0, 0xFF, 0xF0, 0x44, 0xFE, 0x91, 0x20,
        0xFA, 0xF0, 0x40, 0xE6, 0x7F, 0xE0, 0x40, 0x78,
        0xE0, 0xFF, 0xC9, 0xF0, 0x40, 0xCB, 0xFF, 0xE0,
        0x40, 0xC9, 0xAF, 0x21,    0, 0xC3, 0x06, 0xA0,
        0x22, 0x05, 0x20, 0xFC, 0xC9, 0x3E, 0xA0, 0x21,
           0, 0xC3, 0x11, 0x04,    0, 0x06, 0x28, 0x77,
        0x19, 0x05, 0x20, 0xFB, 0xC9, 0xEA, 0xE9, 0xCE,
        0xF0, 0xB8, 0xF5, 0xFA, 0xE9, 0xCE, 0xE0, 0xB8,
        0xEA,    0, 0x20, 0xCD, 0xB5,    0, 0xF1, 0xE0,
        0xB8, 0xEA,    0, 0x20, 0xC9, 0x2A, 0x12, 0x13,
        0x0B, 0x79, 0xB0, 0x20, 0xF8, 0xC9,    0,    0,
           0,    0,    0,    0,    0,    0,    0,    0,
           0,    0,    0,    0,    0,    0,    0,    0,
           0,    0,    0,    0,    0,    0,    0,    0,
           0,    0,    0,    0,    0,    0,    0,    0,
           0,    0,    0,    0,    0,    0,    0,    0,
           0,    0,    0,    0,    0,    0,    0,    0,
           0,    0,    0,    0,    0,    0,    0,    0,
           0,    0,    0,    0,    0,    0,    0,    0,
    ];

    let mut main_ram = vec![0u8; 8192];
    let mut video_ram = vec![0u8; 8192];
    let mut registers = vec![0u8; 12];
    let r_a = 0;
    let r_b = 2;
    let r_c = 3;
    let r_d = 4;
    let r_e = 5;
    let r_f = 1;
    let r_h = 6;
    let r_l = 7;
    let r_sp_s = 8;
    let r_sp_p = 9;
    let r_pc_p = 10;
    let r_pc_c = 11;

    let mut set_memory = |address: u16, value: u8| {
        println!("    memory[0x{:X}] = {:X}", address, value);
        panic!("I don't understand memory addresses.");
    };

    let mut run_code = |code: &Vec<u8>| {
        let mut i = 0;
        while i < code.len() {
            let opcode = code[i];
            println!("read opcode {:X} at {:X}", opcode, i);
            match opcode {
                0x31 => {
                    // LOAD SP, $1, $2
                    registers[r_sp_s] = code[i + 1];
                    registers[r_sp_p] = code[i + 2];
                    println!("  SP = 0x{:X}, 0x{:X}", code[i + 1], code[i + 2]);
                    i += 2;
                }

                0x21 => {
                    // LOAD HL, $1, $2
                    registers[r_h] = code[i + 1];
                    registers[r_l] = code[i + 2];
                    i += 2;
                    println!("  H, L = 0x{:X}, 0x{:X}", code[i + 1], code[i + 2]);
                }

                0xAF => {
                    // XOR A A
                    registers[r_a] = 0; // ^= registers[r_a];
                    println!("  A ^= A (A = 0)");
                }

                0x32 => {
                    // Put A into memory address HL.
                    let mut address = ((registers[r_h] as u16) << 8) + registers[r_l] as u16;
                    println!("  memory[HL] = A");
                    set_memory(address, registers[r_a]);
                    //  Decrement HL.
                    address -= 1;
                    println!("  HL -= 1");
                    registers[r_h] = (address >> 8) as u8;
                    registers[r_l] = address as u8;
                }
                _ => {
                    panic!("unrecognized opcode: {:X}", opcode);
                }
            }
            i += 1;
        }
    };

    run_code(&boot_rom);
}
